// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
// Necessary for Next auth
model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    password      String
    emailVerified DateTime?
    createdAt     DateTime                 @default(now())
    updatedAt     DateTime?                @updatedAt
    imageUrl      String?
    userType      UserType                 @default(STANDARD)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    likes         Like[]
    services      Service[]
    artworks      Artwork[]
    product       Product[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  imageUrl  String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para likes
model Like {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  artwork    Artwork  @relation(fields: [artworkId], references: [id])
  artworkId  String
  createdAt  DateTime @default(now())
}

// Modelo para manejar imágenes (obras)
model Artwork {
  id        String   @id @default(uuid())
  title     String
  imageUrl       String?
  description String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para productos
model Product {
  id        String   @id @default(uuid())
  name      String
  description String?
  price     Float
  images    String[] // Pueden haber múltiples imágenes por producto
  userId    String
  promotionId String
  user      User     @relation(fields: [userId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para servicios
model Service {
  id        String   @id @default(uuid())
  name      String
  description String
  price     Float
  userId    String
  promotionId String
  user      User     @relation(fields: [userId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotion {
  id          String   @id @default(uuid())
  title       String
  description String?
  discount    Float    // Porcentaje de descuento
  startDate   DateTime
  endDate     DateTime
  products    Product[]
  services    Service[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Modelo para banners personalizados
model BannerImage {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  category    BannerCategory
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enum para categorías de banners
enum BannerCategory {
  ARTWORKS
  SERVICES
  PRODUCTS
  EVENTS
  NEWS
  CUSTOM
}

enum UserType {
  ADMIN
  STANDARD
}
